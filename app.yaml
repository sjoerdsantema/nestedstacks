AWSTemplateFormatVersion: '2010-09-09'
Description: EC2/application template for Sentia Academy
Parameters:
  BastionSubnet:
    Description: Bastion Subnet
    Type: String
  BastionHostSecurityGroup:
    Description: Bastion Security Group
    Type: String
  AutoScalingSecurityGroup:
    Description: Autoscaling Security Group
    Type: String
  LoadBalancerSecurityGroup:
    Description: Load Balancer Security Group
    Type: String
  AutoScalingSubnet:
    Description: AutoScaling Subnet
    Type: String
  AutoScalingPubSubnet:
    Description: Public Autoscaling Subnet
    Type: String
  AutoScalingPub2Subnet:
    Description: Public 2nd Autoscaling Subnet
    Type: String
  AutoScaling2Subnet:
    Description: AutoScaling 2 Subnet
    Type: String
  KeyName:
    Description: Keyname to use
    Type: String
  Ami:
    Description: Selected Ami from SkeletonStack
    Type: String
  Sizing:
    Description: Sizing
    Type: String
Mappings:
  EnvironmentSize:
    Small:
      "EC2": "t2.micro"
      "DB": "db.t2.micro"
    Medium:
      "EC2": "db.t2.small"
      "DB": "db.t2.small"
    Large:
      "EC2": "db.t2.medium"
      "DB": "db.t2.medium"
Resources:
  LoadBalancer: #spawn a load balancer
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      Scheme: internet-facing
      Listeners:
        - InstancePort: '80'
          LoadBalancerPort: '80'
          Protocol: HTTP
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref AutoScalingPubSubnet
        - !Ref AutoScalingPub2Subnet
      LoadBalancerName: Loadbalancer
      Tags:
        - Key: Name
          Value: Classic Internet-Facing Loadbalancer
  BastionHostLaunchConfig: #create launch config for bastion host
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
        AssociatePublicIpAddress: true
        ImageId: !Ref Ami
        InstanceMonitoring: false
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        PlacementTenancy: default
        SecurityGroups:
          - Ref: BastionHostSecurityGroup
  BastionHostScalingGroup: # create the asg with a bastion host
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName:
          Ref: BastionHostLaunchConfig
      MinSize: '1'
      MaxSize: '1'
      VPCZoneIdentifier:
        - !Ref BastionSubnet
      Tags:
        - Key: Name
          Value: Bastion host
          PropagateAtLaunch: true
  AsgLaunchConfiguration: #create asg launch config
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref LogMetricsCloudWatchProfile
      ImageId: !Ref Ami
      InstanceMonitoring: true
      InstanceType:
       !FindInMap [EnvironmentSize, !Ref Sizing, EC2] #find in mappings corresponding ec2 size
      KeyName: !Ref KeyName
      UserData:
        "Fn::Base64":
          !Sub |
           #!/bin/bash
           yum update -y
           yum install -y httpd24 php56 php56-mysqlnd
           service httpd start
           chkconfig httpd on
           usermod -a -G apache ec2-user
           chown -R ec2-user:apache /var/www
           chmod 2775 /var/www
           yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA unzip
           cd /home/ec2-user
           curl http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip -O
           unzip CloudWatchMonitoringScripts-1.2.1.zip
           rm -rf CloudWatchMonitoringScripts-1.2.1.zip
           chown ec2-user:ec2-user aws-scripts-mon
           echo "*/5 * * * *ec2-user /home/ec2-user/aws-scripts-mon/mon-put-instance-data.pl --mem-util --aggregated --auto-scaling --from-cron" >> /var/spool/cron/ec2-user
           echo "*/5 * * * *ec2-user /home/ec2-user/aws-scripts-mon/mon-put-instance-data.pl --mem-util --from-cron" >> /var/spool/cron/ec2-user
           curl https://s3.amazonaws.com//aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O
           chmod +x ./awslogs-agent-setup.py
           ./awslogs-agent-setup.py -n -r us-east-2 -c s3://one-sentia-course/logs.conf
           AMI=`curl -s http://169.254.169.254/latest/meta-data/ami-id`
           REGION=`curl -s http://169.254.169.254/latest/dynamic/instance-identity/document|grep region|awk -F\" '{print $4}'|tr -d '\n'`
           AZ=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`
           INSTANCE_ID=`curl -s http://169.254.169.254/latest/meta-data/instance-id`
           PRIVATE_IP=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`
           INFORMATION_HTML="<html><header><title>Wowdiewow je bent online!</title></header><body><table><tr><th>AMI</th><td>${Ami}</td></tr><tr><th>Region</th><td>${AWS::Region}</td></tr></table><p>CFN template 1.0</p></body></html>"
           echo $INFORMATION_HTML > /var/www/html/index.html
      PlacementTenancy: default
      SecurityGroups:
        - !Ref AutoScalingSecurityGroup
  AutoScalingGroup: #spawn auto-scaling group
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref AsgLaunchConfiguration
      MinSize: 2
      MaxSize: 2
      LoadBalancerNames:
        - !Ref LoadBalancer
      VPCZoneIdentifier:
        - !Ref AutoScalingSubnet
        - !Ref AutoScaling2Subnet
      Tags:
        - Key: Name
          Value: Webserver
          PropagateAtLaunch: true
  LogMetricsCloudWatchRole: #create cloudwatch role
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  LogMetricsCloudWatchPolicy: #create cloudwatch policy
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LogMetricsCloudWatchPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricdata
              - ec2:DescribeTags
              - logs:PutLogEvents
              - logs:DescribeLogStreams
              - logs:DescribeLogGroups
              - logs:CreateLogStreams
              - logs:CreateLogGroup
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: arn:aws:s3:::one-sentia-course/*
      Roles:
        - !Ref LogMetricsCloudWatchRole
  LogMetricsCloudWatchProfile: #link cloudwatch role to profile
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref LogMetricsCloudWatchRole
Outputs:
  BastionHost:
    Description: Bastion created in skeleton
    Value: !Ref BastionHostScalingGroup
  LoadBalancer:
    Description: Endpoint of load balancer
    Value: !GetAtt 'LoadBalancer.DNSName'
