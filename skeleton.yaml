AWSTemplateFormatVersion: '2010-09-09'
Description: Skeleton network template for Sentia Academy
Resources:
  VPC: #first create a standard VPC with attached igw
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Template Generated VPC
  InternetGateway: #second an IGW
   Type: AWS::EC2::InternetGateway
   Properties:
    Tags:
      - Key: Name
        Value: InternetGateway
  GatewayAttachement: #attach the IGW
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
       InternetGatewayId: !Ref InternetGateway
       VpcId: !Ref VPC
  BastionSubnet: #create the bastion subnet
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
          Fn::Select:
            - 0
            - Fn::GetAZs: ""
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Bastion Subnet
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
  AutoScalingSubnet: #create ASG1 subnet
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
          Fn::Select:
            - 0
            - Fn::GetAZs: ""
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ASG 1 Subnet
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
  AutoScaling2Subnet: #create ASG2 subnet
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
          Fn::Select:
            - 1
            - Fn::GetAZs: ""
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ASG 2 Subnet
      CidrBlock: 10.0.8.0/24
      MapPublicIpOnLaunch: false
  DatabaseSubnet: #create DB1 subnet
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
          Fn::Select:
            - 0
            - Fn::GetAZs: ""
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Database 1 Subnet
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
  Database2Subnet: #create DB2 subnet
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
          Fn::Select:
            - 1
            - Fn::GetAZs: ""
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Database 2 Subnet
      CidrBlock: 10.0.5.0/24
      MapPublicIpOnLaunch: false
  NatSubnet: #create the nat subnet
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
          Fn::Select:
            - 0
            - Fn::GetAZs: ""
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Nat Subnet
      CidrBlock: 10.0.10.0/24
      MapPublicIpOnLaunch: true
  #spawn security groups
  BastionHostSecurityGroup: #create bastion security group
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: BastionHostSecurityGroup
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Bastion Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  LoadBalancerSecurityGroup: #create load balancer security group
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LoadBalancerSecurityGroup
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Loadbalancer Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  DatabaseSecurityGroup: #create database security group
   Type: AWS::EC2::SecurityGroup
   Properties:
    GroupDescription: DatabaseSecurityGroup
    VpcId: !Ref VPC
    Tags:
      - Key: Name
        Value: Database Security Group
  AutoScalingSecurityGroup: #create asg security group
   Type: AWS::EC2::SecurityGroup
   Properties:
     GroupDescription: AutoScalingSecurityGroup
     VpcId: !Ref VPC
     Tags:
      - Key: Name
        Value: ASG Security Group
  #ingress to security groups
  AutoScalingIngress: #ingress seperate to prevent dependency
   Type: AWS::EC2::SecurityGroupIngress
   Properties:
     GroupId: !Ref AutoScalingSecurityGroup
     IpProtocol: tcp
     ToPort: 80
     FromPort: 80
     SourceSecurityGroupId: !Ref BastionHostSecurityGroup
  AutoScaling2Ingress: #ingress seperate to prevent dependency
   Type: AWS::EC2::SecurityGroupIngress
   Properties:
     GroupId: !Ref AutoScalingSecurityGroup
     IpProtocol: tcp
     ToPort: 22
     FromPort: 22
     SourceSecurityGroupId: !Ref BastionHostSecurityGroup
  AutoScaling3Ingress: #ingress seperate to prevent dependency
   Type: AWS::EC2::SecurityGroupIngress
   Properties:
     GroupId: !Ref AutoScalingSecurityGroup
     IpProtocol: tcp
     ToPort: 80
     FromPort: 80
     SourceSecurityGroupId: !Ref DatabaseSecurityGroup
  AutoScaling4Ingress: #ingress seperate to prevent dependency
   Type: AWS::EC2::SecurityGroupIngress
   Properties:
     GroupId: !Ref AutoScalingSecurityGroup
     IpProtocol: tcp
     ToPort: 80
     FromPort: 80
     SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
  AutoScaling5Ingress: #ingress seperate to prevent dependency
     Type: AWS::EC2::SecurityGroupIngress
     Properties:
       GroupId: !Ref AutoScalingSecurityGroup
       IpProtocol: tcp
       ToPort: 80
       FromPort: 80
       SourceSecurityGroupId: !Ref BastionHostSecurityGroup
  DatabaseIngress: #ingress seperate to prevent dependency
   Type: AWS::EC2::SecurityGroupIngress
   Properties:
     GroupId: !Ref DatabaseSecurityGroup
     IpProtocol: tcp
     ToPort: 3306
     FromPort: 3306
     SourceSecurityGroupId: !Ref AutoScalingSecurityGroup
  #create route tables
  BastionRouteTable: #create bastion route table
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Bastion Route Table
  NatRouteTable: #create nat route table
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Nat Route Table
  AutoScalingRouteTable: #create auto-scaling-route table
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ASG Route Table
  DatabaseRouteTable: #create database route table
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Database Route Table
  #create additonal routes
  NatRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
     DestinationCidrBlock: 0.0.0.0/0
     GatewayId: !Ref InternetGateway
     RouteTableId: !Ref NatRouteTable
  BastionHostInternetRoute: #create route to IGW
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref BastionRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
  AutoScalingRoute: #create route to NAT
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AutoScalingRouteTable
      NatGatewayId: !Ref NatGateway
      DestinationCidrBlock: 0.0.0.0/0
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  #associate all route tables
  BastionHostSubnetRouteTableAssociation: #associate route table to subnet
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref BastionRouteTable
      SubnetId: !Ref BastionSubnet
  NatSubnetRouteTableAssociation: #associate nat route table to subnet
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable
      SubnetId: !Ref NatSubnet
  AutoScalingSubnetRouteTableAssociation: #associate route table to subnet 1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AutoScalingRouteTable
      SubnetId: !Ref AutoScalingSubnet #first asg
  AutoScaling2SubnetRouteTableAssociation: #associate route table to subnet 2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AutoScalingRouteTable
      SubnetId: !Ref AutoScaling2Subnet #second asg
  #create gateway
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc #spawn an elastic ip
  NatGateway: #create the NAT gateway in the bastion subnet
      Type: AWS::EC2::NatGateway
      DependsOn: NatEIP
      Properties:
        AllocationId:
          Fn::GetAtt:
           - NatEIP
           - AllocationId
        SubnetId: !Ref NatSubnet
Outputs:
  SVPC:
    Description: VPC created in skeleton
    Value: !Ref VPC
  SInternetGateway:
    Description: IGW created in skeleton
    Value: !Ref InternetGateway
  SBastionSubnet:
    Description: Bastion subnet created in skeleton
    Value: !Ref BastionSubnet
  SAutoScalingSubnet:
    Description: Autoscaling subnet 1st az created in skeleton
    Value: !Ref AutoScalingSubnet
  SAutoScaling2Subnet:
    Description: Autoscaling subnet 2nd az created in skeleton
    Value: !Ref AutoScaling2Subnet
  SDatabaseSubnet:
    Description: Database subnet 1 created in skeleton
    Value: !Ref DatabaseSubnet
  SDatabase2Subnet:
    Description: Database subnet 2 created in skeleton
    Value: !Ref Database2Subnet
  SDatabaseSecurityGroup:
    Description: Database Security Group created in skeleton
    Value: !Ref DatabaseSecurityGroup
  SBastionHostSecurityGroup:
    Description: BastionHostSecurityGroup created in skeleton
    Value: !Ref BastionHostSecurityGroup
  SLoadBalancerSecurityGroup:
    Description: Load Balancer Security Group created in skeleton
    Value: !Ref LoadBalancerSecurityGroup
  SAutoScalingSecurityGroup:
    Description: Autoscaling Security Group created in skeleton
    Value: !Ref AutoScalingSecurityGroup
  SNatGateway:
    Description: NAT created in skeleton
    Value: !Ref NatGateway
